{"version":3,"file":"index.modern.js","sources":["../src/helper.ts","../src/index.tsx"],"sourcesContent":["/**\n * convert time seconds to minutes : seconds\n * @function\n * @param {number} time\n * @description return the converted time like this = 03:14\n */\n\nexport const ConvertTimeToText = (time:number) => {\n    if(!time) time = 0;\n    var minutes:string = \"0\" + Math.floor(time / 60);\n    var seconds:string = \"0\" +  Math.floor(time - (parseInt(minutes)) * 60);\n    var result:string = minutes.substr(-2) + \":\" + seconds.substr(-2);\n    return result\n}","import { ReactNode, useEffect, useLayoutEffect, useRef, useState } from 'react'\nimport { ConvertTimeToText } from './helper'\n\ninterface Props {\n  tracks: string[]\n  startIndex?: number\n  children?: ((props: PlayerType) => ReactNode) | ReactNode\n}\n// prop types should be like this interface\n\n/**\n * Reaplay\n * @param {string[]} tracks\n * @param {number} startIndex\n * @param {any} children\n * @property {object}  player\n * @property {function} player.Logger\n * @property {boolean}  player.isLoading\n * @property {boolean}  player.isHaveError\n * @property {number}  player.trackIndex\n * @property {number}  player.setTrackIndex\n * @property {number}  player.duration\n * @property {string}  player.durationText\n * @property {number}  player.trackProgress\n * @property {string}  player.trackProgressText\n * @property {string}  player.trackStyling\n * @property {function}  player.onScrub\n * @property {function}  player.onScrubEnd\n * @property {boolean}  player.isPlaying\n * @property {function}  player.setIsPlaying\n * @property {function}  player.play\n * @property {function}  player.pause\n * @property {function}  player.toNextTrack\n * @property {function}  player.toPrevTrack\n * @property {boolean}  player.isRepeat\n * @property {function}  player.repeat\n * @property {number}  player.volume\n * @property {function}  player.setVolume\n * @property {number}  player.speed\n * @property {function}  player.playSlow\n * @property {function}  player.playNormal\n * @property {function}  player.playFast\n * @property {boolean}  player.isStopPlayMoreSong\n * @property {function}  player.StopPlayMoreSong\n * @property {boolean}  player.isShuffle\n * @property {function}  player.playShuffle\n * @property {function}  player.playRandom\n * @property {boolean}  player.isMute\n * @property {function}  player.mute\n * @property {function}  player.unmute\n * @property {number | string}  player.buffered\n * @property {string}  player.bufferedText\n * @property {function}  player.forward\n * @property {function}  player.backward\n */\nexport const Reaplay = ({ tracks, startIndex = 0, children }: Props) => {\n  if (startIndex < 0 || startIndex > tracks.length) {\n    startIndex = 0\n  }\n  // handle the undifind index\n  // -----------------------------------------------\n\n  /**\n   * here manage states\n   * use state because react need update with state if you change something\n   *\n   * @category states\n   */\n\n  // State\n  const [trackIndex, setTrackIndex] = useState<number>(startIndex)\n  // index of the tracks array on play\n\n  const [trackProgress, setTrackProgress] = useState<number>(0)\n  // played progress\n\n  const [volume, setVolume] = useState<number>(100)\n  // volume of the playing song\n\n  const [speed, setSpeed] = useState<number>(1)\n  // volume of the playing song\n\n  const [isPlaying, setIsPlaying] = useState<boolean>(false)\n  // play - puase\n\n  const [isRepeat, setIsRepeat] = useState<boolean>(false)\n  // repeat the playing song\n\n  const [isStopPlayMoreSong, StopPlayMoreSong] = useState<boolean>(false)\n  // if the song come on end, stop and dont play more\n\n  const [isShuffleList, setIsShuffleList] = useState<boolean>(false)\n  // shuffle list do anything ranodm, next - prev - on done\n\n  const [isMute, setIsMute] = useState<boolean>(false)\n  //  control the player mute, unmute\n\n  const [buffered, setBuffered] = useState<number>(0)\n  //  control the player mute, unmute\n\n  const [fourceRepeat, setFourceRepeat] = useState<number>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [isHaveError, setIsHaveError] = useState<boolean>(false)\n  // helper states\n\n  // =====================================================\n\n  // --------\n  // *\n  // *\n  // *\n  // ---------------------------\n  /**\n   * here manage audio\n   * here i use js Audio class and ref for manage audio props and functions\n   *\n   */\n  const audioRef = useRef(new Audio(tracks[trackIndex]))\n  audioRef.current.autoplay = false\n  audioRef.current.volume = volume / 100\n  audioRef.current.muted = isMute\n  audioRef.current.playbackRate = speed\n\n  audioRef.current.onloadeddata = () => setIsLoading(false)\n  audioRef.current.onerror = () => setIsHaveError(true)\n\n  const intervalRef: { current: NodeJS.Timeout | null } = useRef(null)\n  const isReady = useRef(false)\n  // ---------------------------\n  // *\n  // *\n  // *\n  // --------\n\n  // =============================\n  // Destructure for conciseness\n\n  // song duration\n  const { duration } = audioRef.current\n\n  const currentPercentage = duration\n    ? `${(trackProgress / duration) * 100}%`\n    : '0%'\n  const trackStyling = `\n      -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n    `\n  // ==============================\n\n  // ==== Timer\n  /**\n   * change scrub value\n   * @function\n   * @description start the timing of song and detect when the song to ended\n   */\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current as NodeJS.Timeout)\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        if (!isStopPlayMoreSong) {\n          if (isShuffleList) {\n            playRandom()\n          } else {\n            if (isRepeat) {\n              setFourceRepeat((prev) => prev + 1)\n            } else {\n              toNextTrack()\n            }\n          }\n        }\n      } else {\n        setTrackProgress(audioRef.current.currentTime)\n      }\n    }, 1000)\n  }\n\n  /**\n   * change scrub value\n   * @function\n   * @param {number} value - The value for set on scrub\n   * @description set the scrub value on changing time\n   *\n   * on scrub get the slider or range tag value and replace it with playing song progress\n   */\n\n  const onScrub = (value: number): void => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current as NodeJS.Timeout)\n    audioRef.current.currentTime = value\n    setTrackProgress(audioRef.current.currentTime)\n  }\n\n  // -----------\n\n  /**\n   * play song\n   * @function\n   * @description play the current song\n   */\n\n  const play = (): void => {\n    setIsPlaying(true)\n  }\n\n  // -----------\n\n  /**\n   * pause song\n   * @function\n   * @description pause the current song\n   */\n\n  const pause = (): void => {\n    setIsPlaying(false)\n  }\n\n  // -----------\n\n  /**\n   * change scrub value\n   * @function\n   * @description set the scrub value on key or click\n   * @summary optional function\n   *\n   * this optional function\n   */\n\n  const onScrubEnd = (): void => {\n    // If not already playing, start\n    if (!isPlaying) {\n      setIsPlaying(true)\n    }\n    startTimer()\n  }\n\n  /**\n   * go to prev song\n   * @function\n   * @description go prev song at tracks list\n   *\n   * if shuffle play is on (true) the prev song do random\n   * if its first song, play at last song in tracks list\n   */\n\n  const toPrevTrack = (): void => {\n    if (isShuffleList) {\n      playRandom()\n    } else {\n      if (trackIndex - 1 < 0) {\n        setTrackIndex(tracks.length - 1)\n      } else {\n        setTrackIndex(trackIndex - 1)\n      }\n    }\n  }\n\n  /**\n   * go to next song\n   * @function\n   * @description go next song at tracks list\n   *\n   * if shuffle play is on (true) the next song do random\n   * if the last song, come at first song on tracks list\n   */\n\n  const toNextTrack = (): void => {\n    if (isShuffleList) {\n      playRandom()\n    } else {\n      if (trackIndex < tracks.length - 1) {\n        setTrackIndex(trackIndex + 1)\n      } else {\n        setTrackIndex(0)\n      }\n    }\n  }\n\n  /**\n   * forward\n   * @function\n   * @description forward to 5s later of playing song\n   */\n\n  const forward = (): void => {\n    audioRef.current.currentTime += 5\n  }\n\n  /**\n   * backward\n   * @function\n   * @description backward to 5s before of Track progress\n   */\n\n  const backward = (): void => {\n    audioRef.current.currentTime -= 5\n  }\n\n  /**\n   * playSlow\n   * @function\n   * @description set the player speed to (0.5)\n   */\n\n  const playSlow = (): void => {\n    setSpeed(0.5)\n  }\n\n  /**\n   * playNormal\n   * @function\n   * @description set the player speed to normal mode, (1)\n   */\n\n  const playNormal = (): void => {\n    setSpeed(1)\n  }\n\n  /**\n   * playFast\n   * @function\n   * @description set player speed to (2), it be play 2x faster than normal mode\n   */\n\n  const playFast = (): void => {\n    setSpeed(2)\n  }\n\n  /**\n   * repeat\n   * @function\n   * @description set player to repeat current song\n   */\n\n  const repeat = (SetOnRepeat: boolean): void => {\n    if (SetOnRepeat) {\n      setIsRepeat(true)\n    } else {\n      setIsRepeat(false)\n    }\n  }\n\n  /**\n   * mute\n   * @function\n   * @description mute the player\n   */\n\n  const mute = (): void => {\n    setIsMute(true)\n  }\n\n  /**\n   * unmute\n   * @function\n   * @description unmute the player\n   */\n\n  const unmute = (): void => {\n    setIsMute(false)\n  }\n\n  /**\n   * shuffle play\n   * @function\n   * @description play a random song in tracks list\n   *\n   * get a random index from tracks length and play it\n   */\n\n  const playShuffle = (shuffle: boolean): void => {\n    if (shuffle) {\n      setIsShuffleList(true)\n    } else {\n      setIsShuffleList(false)\n    }\n  }\n\n  const playRandom = (): void => {\n    let songsLength: number = tracks.length - 1\n    let random: number = Math.floor(Math.random() * songsLength)\n    setTrackIndex(random)\n  }\n\n  /**\n   * manage isPlay state for play or pause the song\n   * start timer for detect when the song ended or more ..\n   */\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play()\n      startTimer()\n    } else {\n      audioRef.current.pause()\n    }\n  }, [isPlaying])\n\n  /**\n   * manage the buffered value of playing song\n   */\n  useEffect(() => {\n    if (duration > 0) {\n      let i\n      for (i = 0; i < audioRef.current.buffered.length; i++) {\n        setBuffered(\n          (audioRef.current.buffered.end(\n            audioRef.current.buffered.length - 1 - i\n          ) /\n            duration) *\n            100\n        )\n      }\n    }\n  }, [trackProgress])\n\n  /**\n   * manage track index and repeat time\n   * if track index changed, here be call ... and it change the audio ref src\n   * if fource update be called, it do anything at first\n   */\n\n  useLayoutEffect(() => {\n    audioRef.current.pause()\n    setIsPlaying(false)\n    setIsLoading(true)\n    setBuffered(0)\n\n    audioRef.current = new Audio(tracks[trackIndex])\n    setTrackProgress(audioRef.current.currentTime)\n    audioRef.current.onloadeddata = () => setIsLoading(false)\n\n    if (isReady.current) {\n      audioRef.current.play()\n      setIsPlaying(true)\n      startTimer()\n    } else {\n      // Set the isReady ref as true for the next pass\n      isReady.current = true\n    }\n  }, [trackIndex, fourceRepeat])\n\n  /**\n   * clean the memory and pause the song for manage memory leak and\n   */\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause()\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n  }, [])\n\n  /**\n   * Logger\n   * @function\n   * @description get player state\n   *\n   * if some time you need get player states seconds by seconds can use it.\n   */\n\n  const Logger = (): void => {\n    console.log({\n      trackIndex,\n      duration: ConvertTimeToText(duration),\n      trackProgress: ConvertTimeToText(trackProgress),\n      isPlaying,\n      isRepeat,\n      isShuffleList,\n      isStopPlayMoreSong,\n      volume,\n      isLoading,\n      isHaveError,\n      speed\n    })\n  }\n\n  // *****************\n  // *********\n  // **\n  // ==============  return data\n  const data: PlayerType = {\n    Logger, // log the states\n    isLoading, // loading state\n    isHaveError, // error state\n    trackIndex, // playing index at tracks list\n    setTrackIndex, // set playing index at tracks list\n    duration, // playing song duration\n    durationText: ConvertTimeToText(audioRef.current.duration), // playing song duration by minutes and : spliter\n    trackProgress, // how much song played\n    trackProgressText: ConvertTimeToText(trackProgress), // how much song played by minutes and : spliter\n    trackStyling, // random style generated\n    onScrub, // on scrub function for change track progress\n    onScrubEnd,\n    isPlaying, // playing state\n    setIsPlaying, // playing state setter\n    play, // play current song\n    pause, // pause current song\n    toNextTrack, // play next song function\n    toPrevTrack, // play prevent song function\n    isRepeat, // repeat state\n    repeat, // set repeat state\n    volume, // volume state\n    setVolume, // set volume state\n    isStopPlayMoreSong, // stop play more song at song ended\n    StopPlayMoreSong, // set stop play more song\n    playShuffle, // play a random song at list function\n    isShuffle: isShuffleList, // is on shuffle or not\n    playRandom, // play a random song\n    isMute, // the player is mute\n    mute, // set player to mute\n    unmute, // set player to unmute\n    buffered, // the buffered value of the song\n    bufferedText: `${buffered}%`,\n    backward, // forward to 5s\n    forward, // backward to 5s\n    speed, // the speed range, 0.5 or 1 or 2\n    playSlow, // play slow playbackRate of track\n    playNormal, // play normal playbackRate of track\n    playFast // play fast playbackRate of track\n  }\n\n  // @ts-ignore\n  return children({\n    ...data\n  })\n}\n\nexport interface PlayerType {\n  Logger: Function\n  isLoading: boolean\n  isHaveError: boolean\n  trackIndex: number\n  setTrackIndex: (index: number) => void\n  duration: number\n  durationText: string\n  trackProgress: number\n  trackProgressText: string\n  trackStyling: string\n  onScrub: Function\n  onScrubEnd: Function\n  isPlaying: boolean\n  setIsPlaying: (isPlaying: boolean) => void\n  play: Function\n  pause: Function\n  toNextTrack: Function\n  toPrevTrack: Function\n  isRepeat: boolean\n  repeat: (setOnrepeat: boolean) => void\n  volume: number\n  setVolume: (volume: number) => void\n  speed: number\n  playSlow: Function\n  playNormal: Function\n  playFast: Function\n  isStopPlayMoreSong: boolean\n  StopPlayMoreSong: Function\n  playShuffle: (isShuffle: boolean) => void\n  isShuffle: boolean\n  playRandom: Function\n  isMute: boolean\n  mute: Function\n  unmute: Function\n  buffered: number | string\n  bufferedText: string\n  forward: Function\n  backward: Function\n}\n"],"names":["ConvertTimeToText","time","minutes","Math","floor","seconds","parseInt","result","substr","Reaplay","tracks","startIndex","children","length","useState","trackIndex","setTrackIndex","trackProgress","setTrackProgress","volume","setVolume","speed","setSpeed","isPlaying","setIsPlaying","isRepeat","setIsRepeat","isStopPlayMoreSong","StopPlayMoreSong","isShuffleList","setIsShuffleList","isMute","setIsMute","buffered","setBuffered","fourceRepeat","setFourceRepeat","isLoading","setIsLoading","isHaveError","setIsHaveError","audioRef","useRef","Audio","current","autoplay","muted","playbackRate","onloadeddata","onerror","intervalRef","isReady","duration","currentPercentage","trackStyling","startTimer","clearInterval","setInterval","ended","playRandom","prev","toNextTrack","currentTime","onScrub","value","play","pause","onScrubEnd","toPrevTrack","forward","backward","playSlow","playNormal","playFast","repeat","SetOnRepeat","mute","unmute","playShuffle","shuffle","songsLength","random","useEffect","i","end","useLayoutEffect","Logger","console","log","data","durationText","trackProgressText","isShuffle","bufferedText"],"mappings":"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"}